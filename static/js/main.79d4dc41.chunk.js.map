{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","todolistId","taskId","delete","post","model","put","Task","onClickHandler","useCallback","removeTask","task","id","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","data","items","todoId","type","fetchTaskAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","map","style","paddingTop","Button","App","getState","todos","setTodosAC","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","currentTask","find","description","deadline","startDate","priority","changeTaskStatusAC","updateTasksStatusTC","newTitle","action","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","copyState","forEach","newTasks","todoListId","todolistTasks","newTasksArray","a","addedDate","order","todolist","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79d4dc41.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5883697e-1933-44d6-978d-c735fd6eee7a'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import TextField from '@material-ui/core/TextField';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodosTypeAC} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    task: TaskType\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosTypeAC\r\n    | FetchTaskType\r\n\r\nconst initialState: TasksStateType = {\r\n    // 'todoId1': [],\r\n    // 'todoId2': [],\r\n    // 'todoId3': [],\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case  'SET-TASKS':\r\n\r\n            let stateCopy = {...state}\r\n            stateCopy [action.todoId] = action.tasks\r\n            return stateCopy\r\n\r\n\r\n        case 'SET-TODOS':\r\n            let copyState = {...state}\r\n            action.todos.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n\r\n        case 'REMOVE-TASK': {\r\n            debugger\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            // const newTask: TaskType = {\r\n            //     id: v1(),\r\n            //     title: action.title,\r\n            //     status: TaskStatuses.New,\r\n            //     todoListId: action.todolistId, description: '',\r\n            //     startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            // }\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n\r\nexport type FetchTaskType = ReturnType<typeof fetchTaskAC>\r\nexport const fetchTaskAC = (todoId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        todoId,\r\n        tasks\r\n    } as const\r\n}\r\n\r\n\r\nexport const fetchTaskTC = (todolistId: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                let tasks = res.data.items\r\n                dispatch(fetchTaskAC(todolistId, tasks))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (todoId: string, taskId: string) => {\r\n    debugger\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todoId, taskId)\r\n\r\n            .then((res) => {\r\n                debugger\r\n                dispatch(removeTaskAC(taskId, todoId))\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (todoId: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todoId, title)\r\n            .then((res) => {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            })\r\n    }\r\n}\r\nexport const updateTasksStatusTC = (todoId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    debugger\r\n    const allAppTasks = state.tasks;\r\n    const tasksForClickedTodo = allAppTasks[todoId]\r\n    const currentTask = tasksForClickedTodo.find(t => {\r\n        return t.id === taskId\r\n    })\r\n    // const updatedTask = {...currentTask, status} as UpdateTaskModelType\r\n    if (currentTask) {\r\n        let model = {\r\n            title: currentTask.title,\r\n            status,\r\n            description:currentTask.description,\r\n            deadline:currentTask.deadline,\r\n            startDate: currentTask.startDate,\r\n            priority:currentTask.priority\r\n\r\n\r\n        }\r\n        todolistsAPI.updateTask(todoId, taskId, model)\r\n        const action = changeTaskStatusAC(taskId, status, todoId);\r\n        dispatch(action);\r\n    }\r\n\r\n\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\n\r\n\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"./state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(fetchTaskTC(props.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodosTypeAC\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOS': {\r\n            let a: Array<TodolistDomainType> = action.todos.map(tl => {\r\n                return {...tl, filter: 'all'}\r\n            })\r\n            return a\r\n        }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\nexport  type  SetTodosTypeAC = ReturnType<typeof setTodosAC>\r\nexport const setTodosAC = (todos: TodolistType[]) => {\r\n    return {\r\n        type: 'SET-TODOS',\r\n        todos,\r\n    } as const\r\n}\r\nexport const setTodosTC = () => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    //1.sideeffects ( ajax, localStorage...)\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n// 2. dispatch actions ( thunk)\r\n            let todos = res.data\r\n            dispatch(setTodosAC(todos))\r\n        })\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    setTodosTC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {addTaskTC, changeTaskTitleAC, removeTaskTC, updateTasksStatusTC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodosTC())\r\n    }, [])\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        debugger\r\n        dispatch(removeTaskTC(todolistId, taskId));\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTasksStatusTC(todolistId, id, status))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n\r\n                    {\r\n\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}