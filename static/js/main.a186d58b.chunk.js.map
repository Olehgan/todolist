{"version":3,"sources":["Button.tsx","NewInput.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx","Button.module.css"],"names":["Button","props","className","filter","name","style","activeFilter","onClick","callback","NewInput","useState","error","setError","value","title","onChange","e","setTitle","currentTarget","onKeyPress","charCode","addTask","todolistID","TodoList","tsarFooHandler","filterValue","changeFilter","trim","tasks","map","t","isDone","type","changeTaskStatus","id","checked","removeTask","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","changeStatus","taskId","m","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.a186d58b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from './Button.module.css'\r\nimport {FilterValuesType} from \"./App\";\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    filter?: FilterValuesType\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n    return (\r\n        <button className={props.filter === props.name ? style.activeFilter : \"\"}\r\n                onClick={onClickHandler}>{props.name}</button>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype propsType = {\r\n    title: string\r\n    setTitle: (title: string) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    todolistID: string;\r\n}\r\n\r\nexport const NewInput = (props: propsType) => {\r\n\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            props.addTask(props.todolistID, props.title)\r\n            props.setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <input value={props.title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Button} from \"./Button\";\r\nimport {NewInput} from \"./NewInput\";\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n}\r\nexport function TodoList(props: PropsType) {\r\n    const tsarFooHandler = (filterValue:FilterValuesType)=>{\r\n        props.changeFilter(props.todolistID,filterValue,)\r\n    }\r\n    let [title, setTitle] = useState(\"\")\r\n    const addTaskHandler=()=>{\r\n        if(title.trim()!== ''){\r\n            props.addTask(props.todolistID,title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div className={'both'}>\r\n            <NewInput title={title} setTitle={setTitle} addTask={props.addTask} todolistID={props.todolistID} />\r\n            <Button name={'+'}  callback={addTaskHandler} />\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const removeHandler = () =>\r\n                        props.removeTask(props.todolistID, t.id)\r\n\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistID, t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <Button name={'x'} callback={removeHandler}/>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button name={'All'} callback={()=>{tsarFooHandler('All')}}/>\r\n            <Button name={'Active'} callback={()=>{tsarFooHandler('Active')}}/>\r\n            <Button name={'Completed'} callback={()=>{tsarFooHandler('Completed')}}/>\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {TaskType, TodoList} from \"./Todolist\";\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\";\r\ntype  todoListsType = { id: string, title: string, filter: FilterValuesType }\r\ntype TasksType = { [key: string]: Array<TaskType> }\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todoListsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'All'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'All'},\r\n\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t=>t.id!==id) } )\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n        setTasks({...tasks,[todolistID] : [...tasks[todolistID], {id: v1(), title: title, isDone: false}]})\r\n  }\r\n\r\n    function changeStatus( todolistID: string, taskId: string, isDone: boolean) {\r\n\r\n        setTasks({...tasks,[todolistID] : tasks[todolistID].map(m=>m.id ===taskId ? {...m,isDone:isDone}: m)})\r\n    }\r\n\r\n    function changeFilter(    todolistID: string,  value: FilterValuesType) {\r\n        setTodolists(todolists.map(m=>m.id===todolistID ? {...m,filter:value}: m))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(m => {\r\n\r\n                let tasksForTodolist = tasks[m.id];\r\n\r\n                if (m.filter === \"Active\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => !t.isDone);\r\n                }\r\n                if (m.filter === \"Completed\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => t.isDone);\r\n                }\r\n\r\n\r\n                return (\r\n\r\n                    <TodoList\r\n                        todolistID={m.id}\r\n                        key={m.id}\r\n                        title={m.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={m.filter}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"Button_activeFilter__3DX9N\"};"],"sourceRoot":""}