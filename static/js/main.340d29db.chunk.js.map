{"version":3,"sources":["Button.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx","Button.module.css"],"names":["Button","props","className","filter","name","style","activeFilter","onClick","callback","todolistID","TodoList","useState","title","setTitle","error","setError","addTask","trim","value","onChange","e","currentTarget","onKeyPress","charCode","tasks","map","t","isDone","type","changeTaskStatus","id","checked","removeTask","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","changeStatus","taskId","m","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.340d29db.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport style from './Button.module.css'\r\nimport {FilterValuesType} from \"./App\";\r\n\r\ntype ButtonPropsType = {\r\n    name: FilterValuesType\r\n    callback: (todolistID: string, value: FilterValuesType) => void\r\n    todolistID: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.callback(props.todolistID,props.name)\r\n    }\r\n    return (\r\n        <button className={props.filter===props.name? style.activeFilter : \"\"} onClick={onClickHandler}>{props.name}</button>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Button} from \"./Button\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string,title: string) => void\r\n    changeTaskStatus: (todolistID: string,taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(props.todolistID,title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todolistID,t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistID, t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button name={'All'} callback={props.changeFilter} todolistID={props.todolistID} filter={props.filter}/>\r\n            <Button name={'Active'} callback={props.changeFilter} todolistID={props.todolistID} filter={props.filter}/>\r\n            <Button name={'Completed'} callback={props.changeFilter} todolistID={props.todolistID} filter={props.filter}/>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport {v1} from 'uuid';\r\nimport {TaskType, TodoList} from \"./Todolist\";\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\";\r\ntype  todoListsType = { id: string, title: string, filter: FilterValuesType }\r\ntype TasksType = { [key: string]: Array<TaskType> }\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todoListsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'All'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'All'},\r\n\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t=>t.id!==id) } )\r\n\r\n        // let currenTask = tasks[todolistID];\r\n        // tasks[todolistID] = currenTask.filter(t => t.id !== id);\r\n        // setTasks({...tasks})\r\n\r\n        // let filteredTasks = tasks.filter(t => t.id != id);\r\n        // setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n        setTasks({...tasks,[todolistID] : [...tasks[todolistID], {id: v1(), title: title, isDone: false}]})\r\n\r\n        // setTasks({...tasks,[todolistID] : [ {id: v1(), title: \"GraphQL2\", isDone: false},...tasks[todolistID]]})\r\n\r\n\r\n        // let task = {id: v1(), title: title, isDone: false};\r\n        // let newTasks = [task, ...tasks];\r\n        // setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatus( todolistID: string, taskId: string, isDone: boolean) {\r\n\r\n        setTasks({...tasks,[todolistID] : tasks[todolistID].map(m=>m.id ===taskId ? {...m,isDone:isDone}: m)})\r\n        // // let task = tasks.find(t => t.id === taskId);\r\n        // // if (task) {\r\n        // //     task.isDone = isDone;\r\n        // }\r\n        //\r\n        // setTasks([...tasks]);\r\n    }\r\n\r\n    function changeFilter(    todolistID: string,  value: FilterValuesType) {\r\n        setTodolists(todolists.map(m=>m.id===todolistID ? {...m,filter:value}: m))\r\n        // setFilter(value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(m => {\r\n\r\n                let tasksForTodolist = tasks[m.id];\r\n\r\n                if (m.filter === \"Active\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => !t.isDone);\r\n                }\r\n                if (m.filter === \"Completed\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => t.isDone);\r\n                }\r\n\r\n\r\n                return (\r\n\r\n                    <TodoList\r\n                        todolistID={m.id}\r\n                        key={m.id}\r\n                        title={m.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={m.filter}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"Button_activeFilter__3DX9N\"};"],"sourceRoot":""}