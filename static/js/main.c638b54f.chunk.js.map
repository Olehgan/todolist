{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","newTaskTitle","setNewTaskTitle","error","setError","allBtnClass","filter","activeBtnClass","completedBtnClass","userMsg","style","color","title","className","value","onChange","e","currentTarget","onKeyPress","charCode","addTask","onClick","trimmedTitle","trim","tasks","map","t","type","checked","isDone","changeTasksStatus","id","removeTask","changeFilter","App","console","log","v1","setTasks","setFilter","tasksForTodolist","filteredTasks","updatedTasks","newTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c638b54f.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string) => void\r\n    changeFilter: (value: FilterValuesType) => void\r\n    changeTasksStatus: (id: string, isDone: boolean) => void\r\n    addTask: (title: string) => void\r\n\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            props.addTask(newTaskTitle);\r\n            setNewTaskTitle(\"\")\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = newTaskTitle.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setNewTaskTitle(\"\")\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(\"all\")\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(\"active\")\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(\"completed\")\r\n    }\r\n\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\";\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\";\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\";\r\n    const userMsg = error\r\n        ? <div style={{color: \"red\"}}>Title is required</div>\r\n        : null   // : <div>Enter title!</div>\r\n    //JSX\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input\r\n                className={error ? \"error\" : \"\"}\r\n                value={newTaskTitle}\r\n                onChange={onNewTitleChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {userMsg}\r\n        </div>\r\n        <ul>\r\n            {props.tasks.map(t => {\r\n\r\n                const onRemoveHandler = () => {\r\n                    props.removeTask(t.id)\r\n                }\r\n                const changeTasksStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTasksStatus(t.id, e.currentTarget.checked)\r\n                return <li key={t.id}>\r\n                    <input\r\n\r\n                        type={\"checkbox\"}\r\n                        checked={t.isDone}\r\n                        onChange={changeTasksStatus}\r\n                    />\r\n                    <span>{t.title}</span>\r\n                    <button onClick={onRemoveHandler}>x\r\n                    </button>\r\n                </li>\r\n            })\r\n\r\n            }\r\n\r\n\r\n        </ul>\r\n        <div>\r\n            <button\r\n                className={allBtnClass} onClick={onAllClickHandler}\r\n            >All\r\n            </button>\r\n            <button\r\n                className={activeBtnClass} onClick={onActiveClickHandler}\r\n            >Active\r\n            </button>\r\n            <button\r\n                className={completedBtnClass} onClick={onCompletedClickHandler}\r\n            >Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nconst App = () => {\r\n    console.log()\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false}\r\n    ]);\r\n    console.log(tasks)\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id !== id);\r\n        setTasks(filteredTasks)\r\n    }\r\n\r\n    function addTask(title: string) {\r\n\r\n\r\n        let newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        };\r\n        let newTasks = [newTask, ...tasks];\r\n        setTasks(newTasks)\r\n\r\n    }\r\n    const changeTasksStatus = (id: string, isDone:boolean) => {\r\n        const updatedTasks = tasks.map(t=> t.id === id ? {...t, isDone: isDone} : t )\r\n        setTasks(updatedTasks)\r\n    }\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                filter={filter}\r\n                title={\"What to learn\"}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTasksStatus={changeTasksStatus}\r\n                addTask={addTask}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}