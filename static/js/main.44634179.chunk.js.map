{"version":3,"sources":["EditTabalSpan.tsx","Input.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","props","useState","edit","setEdit","title","setTitle","value","onBlur","callBack","autoFocus","onChange","e","currentTarget","onDoubleClick","Input","error","setError","addTask","newTitle","trim","onKeyPress","charCode","className","onClick","Todolist","changeNameTodolist","id","removeTodolist","tasks","map","t","isDone","type","newIsDoneValue","checked","changeTaskStatus","updateTask","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","tId","m","console","log","todolistId","todolistTasks","task","changeStatus","find","todolist","tl","newId","allTodolistTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.44634179.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack:(title:string)=>void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [edit, setEdit] = useState(false);\r\n    let [title, setTitle] = useState(props.title)\r\n\r\n    const activeClick = () => {\r\n        setEdit(true)\r\n\r\n    }\r\n    const deActiveClick = () => {\r\n        setEdit(false)\r\n        props.callBack(title)\r\n    }\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        edit\r\n            ? <input value={title} onBlur={deActiveClick} autoFocus onChange={onChangeHandler}/>\r\n            : <span onDoubleClick={activeClick}>{props.title}</span>\r\n\r\n    )\r\n\r\n\r\n}","\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n\r\ntype InputPropsTYpe={\r\n    callBack:(title: string)=>void\r\n\r\n}\r\n\r\nexport const Input = (props:InputPropsTYpe) =>{\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.  callBack(newTitle );\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {EditableSpan} from \"./EditTabalSpan\";\r\nimport {Input} from \"./Input\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string,) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    updateTask:(title: string, todolistId: string,tId:string)=> void\r\n    changeNameTodolist:(title:string, todolistId:string)=>void\r\n\r\n}\r\n\r\nexport function Todolist (props: PropsType) {\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3>\r\n            <EditableSpan title={props.title} callBack={(title)=>props.changeNameTodolist(title,props.id)}/>\r\n            <button onClick={removeTodolist}>x</button>\r\n        </h3>\r\n        <Input callBack={(title)=>props.addTask(title,props.id)}/>\r\n\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\" onChange={onChangeHandler} checked={t.isDone}/>\r\n                        <EditableSpan title={t.title} callBack={(title)=>props.updateTask(title,props.id,t.id)}/>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\n\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {Input} from \"./Input\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addTodolist(title: string) {\r\n        let newId = v1();\r\n        setTodolists([...todolists, {id: newId, title: title, filter: \"all\"},])\r\n        setTasks({...tasks, [newId]: []})\r\n\r\n    }\r\n\r\n    function changeNameTodolist(title: string, tId: string) {\r\n        setTodolists(todolists.map(m => m.id === tId ? {...m, title} : m))\r\n        console.log(title)\r\n    }\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    const updateTask = (title: string, todolistId: string, tId: string) => {\r\n        console.log(title)\r\n        setTasks({...tasks, [todolistId]: tasks[todolistId].map(m => m.id === tId ? {...m, title} : m)})\r\n\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        //изменим таску, если она нашлась\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Input callBack={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n                    }\r\n\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodolist={removeTodolist}\r\n                        updateTask={updateTask}\r\n                        changeNameTodolist={changeNameTodolist}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}